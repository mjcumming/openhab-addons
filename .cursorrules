# .cursorrules for OpenHAB Total Comfort Binding

# General Guidelines
- Adhere to the OpenHAB coding guidelines: https://www.openhab.org/docs/developer/guidelines.html
- Follow established patterns and best practices from existing OpenHAB bindings.
- Prioritize code readability and maintainability.
- Use clear and concise comments to explain code logic.

# Language and Framework
- Use Java for all code within the binding.
- Leverage OpenHAB APIs and libraries.
- Minimize external dependencies; rely on built-in or well-supported libraries for JSON, HTTP, etc.

# SomeComfort OpenHAB Binding

## Overview
Implementation of the Honeywell Total Comfort Control API as an OpenHAB binding. Based on the Python async-somecomfort library, providing control and monitoring of Honeywell thermostats.

## Directory Structure
```
org.openhab.binding.somecomfort/
├── src/
│   └── main/
│       ├── java/
│       │   └── org/openhab/binding/somecomfort/
│       │       └── internal/
│       │           ├── SomecomfortBindingConstants.java   # Constants and identifiers
│       │           ├── client/                            # API client implementation
│       │           │   ├── SomecomfortHttpClient.java     # Low-level HTTP client
│       │           │   ├── SomecomfortApi.java           # High-level API operations
│       │           │   ├── model/                        # Data model classes
│       │           │   │   ├── Location.java            # Location data model
│       │           │   │   └── Device.java              # Device data model
│       │           │   └── exceptions/                   # Custom exceptions
│       │           │       ├── SomeComfortError.java     # Base exception class
│       │           │       ├── AuthError.java            # Authentication errors
│       │           │       ├── APIError.java             # General API errors
│       │           │       ├── SessionError.java         # Session handling errors
│       │           │       ├── RateLimitError.java       # Rate limiting errors
│       │           │       └── RequestError.java         # HTTP request errors
│       │           ├── handler/                          # Thing handlers
│       │           │   ├── SomecomfortHandlerFactory.java # Handler factory
│       │           │   ├── SomecomfortBridgeHandler.java  # Bridge handler
│       │           │   └── SomecomfortHandler.java        # Thing handler
│       │           └── discovery/                         # Discovery service
│       │               └── SomecomfortDiscoveryService.java
│       └── resources/
│           └── ESH-INF/
│               └── thing/
│                   └── thing-types.xml                   # Thing type definitions
└── pom.xml                                              # Project build file
```

## Client Package Organization

### Model Classes
The `client/model` package contains data model classes that represent the core entities in the Honeywell Total Comfort system:

1. **Location.java**
   - Represents a physical location containing thermostats
   - Manages collection of devices at the location
   - Properties:
     - Location ID
     - Name
     - Collection of devices

2. **Device.java**
   - Represents a Honeywell thermostat device
   - Manages device state and capabilities
   - Properties:
     - Device ID
     - Name
     - MAC ID
     - Temperature readings
     - Setpoints
     - System modes
     - Fan modes
     - Equipment status

### Client Implementation
The client package implements the API communication layer:

1. **SomecomfortHttpClient.java**
   - Low-level HTTP operations
   - Session management
   - Raw API calls

2. **SomecomfortApi.java**
   - High-level API operations
   - Data model conversion
   - Business logic implementation

### Exception Handling
The `client/exceptions` package provides a hierarchy of custom exceptions for different error scenarios:

1. **SomeComfortError.java** - Base exception class
2. **AuthError.java** - Authentication failures
3. **APIError.java** - General API errors
4. **SessionError.java** - Session management issues
5. **RateLimitError.java** - Rate limiting violations
6. **RequestError.java** - HTTP request failures

## Critical Implementation Details

### HTTP Client Requirements
1. Must exactly match Python requests library headers:
   ```
   User-Agent: Mozilla/5.0
   X-Requested-With: XMLHttpRequest
   Accept: application/json, text/javascript, */*; q=0.01
   ```
2. Login requires initial GET then POST with timeOffset=480
3. Cookie handling must persist across requests
4. Session handling matches Python implementation with keepalive checks

### API Endpoints
- `/Account/LogOn` - Authentication
- `/Location/GetLocationListData` - List locations
- `/Device/CheckDataSession/{deviceId}` - Get device data
- `/Device/SubmitControlScreenChanges` - Update device settings

### Device Features
1. Temperature units (F/C) handling
2. Outdoor temp/humidity when available
3. Hold modes: none/temporary/permanent
4. System modes: emheat, heat, off, cool, auto
5. Fan modes: auto, on, circulate, follow schedule

### Authentication Flow
1. Initial GET to /portal
2. POST credentials with timeOffset
3. Store session cookies
4. Verify with keepalive check
5. Handle automatic re-auth on timeout

### OpenHAB Integration Points
1. Bridge represents account
2. Things represent thermostats
3. Channels for:
   - Temperature readings
   - Setpoints
   - System/Fan modes
   - Hold settings
   - Outdoor conditions

## Reference Code
Reference Python implementation in `async-somecomfort`:
- Connection handling in Client class
- Device data structures
- API endpoint mappings

## Critical Notes
1. API rate limiting at 6 requests/minute
2. All temperature values in Fahrenheit
3. Hold times must be 15-minute boundaries
4. Polling interval minimum 60 seconds
5. Must handle partial device data

1. [OpenHAB Developer Guidelines](https://www.openhab.org/docs/developer/guidelines.html)  
2. [OpenHAB Binding Development](https://www.openhab.org/docs/developer/bindings/)  
3. [OpenHAB Add-on Development](https://www.openhab.org/docs/developer/addons/)
4. python reference code [text](https://github.com/kk7ds/somecomfort)
---


- **OpenHAB Developer Resources**:
  - [Binding Development](https://www.openhab.org/docs/developer/bindings/)
  - [Add-on Development](https://www.openhab.org/docs/developer/addons/)
