# .cursorrules for OpenHAB LinkPlay Binding

# General Guidelines
- Adhere to the OpenHAB coding guidelines: https://www.openhab.org/docs/developer/guidelines.html
- Follow established patterns and best practices from existing OpenHAB bindings.
- Prioritize code readability and maintainability.
- Use clear and concise comments to explain code logic.

# Language and Framework
- Use Java for all code within the binding.
- Leverage OpenHAB APIs and libraries.
- Minimize external dependencies; rely on built-in or well-supported libraries for JSON, HTTP, etc.

# Binding Purpose and Documentation
This binding integrates with LinkPlay/Arylic-based audio devices, allowing:
- Device discovery via UPnP (optional).
- Device control and status via LinkPlay HTTP APIs (primary).
- Multiroom grouping (join/leave/kick) via the LinkPlay multiroom API.
- UART support (placeholder for specialized devices).
Consult the following resources for more details:
- LinkPlay HTTP API Docs: https://developer.arylic.com/httpapi/#http-api
- OpenHAB Binding Development: https://www.openhab.org/docs/developer/bindings/
- Existing LinkPlay references, such as https://github.com/Velleman/python-linkplay/tree/main/src/linkplay

# Directory Structure and File Roles

## `org.openhab.binding.linkplay.internal`
Entry point for internal code. Contains a device manager and shared utilities.

### `config`
- **`LinkPlayConfiguration.java`**  
  Holds and validates user/device config (e.g., IP address, polling intervals).  
  Ensures default values and correct data types.

### `discovery`
- **`LinkPlayUpnpDiscoveryParticipant.java`**  
  Detects LinkPlay devices on the network via UPnP.  
  Determines device compatibility before creating the Thing.

### `handler`
- **`LinkPlayThingHandler.java`**  
  Primary openHAB interface for each LinkPlay device.  
  Manages lifecycle events (initialize/dispose) and delegates commands.
- **`LinkPlayHandlerFactory.java`**  
  Creates new Thing handlers (e.g., `LinkPlayThingHandler`) for discovered or manually added Things.

### `model`
- **`LinkPlayMultiroomInfo.java`**  
  Data model representing multiroom state (role, master IP, slave IPs).  
  Parsed from device JSON and used by the multiroom manager.

### `multiroom`
- **`LinkPlayGroupManager.java`**  
  Coordinates grouping/ungrouping, join/leave commands, and master/slave roles.  
  Relies on HTTP calls to implement multiroom operations.

### `transport`
- **`http/LinkPlayHttpClient.java`**  
  Low-level HTTP requests (GET/POST, timeouts).  
- **`http/LinkPlayHttpManager.java`**  
  Orchestrates HTTP polling, command sending, and JSON parsing.  
- **`upnp/LinkPlayUpnpManager.java`**  
  Subscribes to UPnP events for real-time state changes, if available.  
- **`uart/LinkPlayUartManager.java`**  
  (Optional) Placeholder for LinkPlay UART protocol support.

### `metadata`
- **`LinkPlayMetadataService.java`**  
  Retrieves additional metadata (e.g., album art) from external sources.  
  Invoked when title/artist changes to enrich displayed info.

### `utils`
- **`HexConverter.java`**  
  Utility class for converting hex-encoded strings to plain text.

### Core Coordinator
- **`LinkPlayDeviceManager.java`**  
  Central coordinator that creates/holds references to `LinkPlayHttpManager`, `LinkPlayUpnpManager`, `LinkPlayGroupManager`, etc.  
  Processes device status and updates channels via `LinkPlayThingHandler`.

### `resources` (OpenHAB internal config files)
- **`OH-INF/addon.xml`**  
  Metadata about this binding (name, version, author).
- **`OH-INF/thing/linkplay-player.xml`**  
  Defines channels (volume, mute, etc.) for LinkPlay-based devices.
- **`OH-INF/i18n/linkplay.properties`**  
  Localization keys and messages for the LinkPlay binding.

# **References & Further Reading**

1. [OpenHAB Developer Guidelines](https://www.openhab.org/docs/developer/guidelines.html)  
2. [OpenHAB Binding Development](https://www.openhab.org/docs/developer/bindings/)  
3. [LinkPlay/Arylic HTTP API Docs](https://developer.arylic.com/httpapi/#http-api)  
4. [LinkPlay Python Implementation](https://github.com/Velleman/python-linkplay/tree/main/src/linkplay)  
5. WeMo Binding (UPnP Example) - [openhab-addons GitHub](https://github.com/openhab/openhab-addons/tree/main/bundles/org.openhab.binding.wemo)  
6. Samsung TV Binding (HTTP + UPnP Example) - [openhab-addons GitHub](https://github.com/openhab/openhab-addons/tree/main/bundles/org.openhab.binding.samsungtv)

---

**End of Document**
## **Research and Reference Documents**
- **LinkPlay API Documentation**: [LinkPlay API Docs](https://developer.arylic.com/httpapi/#http-api)
- **LinkPlay Python Implementation**: [GitHub Repository](https://github.com/Velleman/python-linkplay/tree/main/src/linkplay)
- **Wemo Binding**: Reference for modern UPnP implementation.
- **Sonos Binding**: Robust patterns for audio devices.
- **OpenHAB Developer Resources**:
  - [Binding Development](https://www.openhab.org/docs/developer/bindings/)
  - [Add-on Development](https://www.openhab.org/docs/developer/addons/)
