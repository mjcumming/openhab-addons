# .cursorrules for OpenHAB Linkplay Binding

# General Guidelines
- Adhere to the OpenHAB coding guidelines: https://www.openhab.org/docs/developer/guidelines.html
- Follow established patterns and best practices from existing OpenHAB bindings.
- Prioritize code readability and maintainability.
- Use clear and concise comments to explain code logic.

# Language and Framework
- Use Java for all code within the binding.
- Leverage the OpenHAB API and related libraries.

# Binding Structure
- Follow the OpenHAB binding development guidelines: https://www.openhab.org/docs/developer/bindings/
- Organize code into appropriate packages (e.g., `org.openhab.binding.linkplay.internal`).
- Create separate classes for things, handlers, and discovery.

# API Implementation
- Refer to the Linkplay HTTP API documentation: https://developer.arylic.com/httpapi/#http-api
- Specifically, use these sections for reference:
    - Device Information: https://developer.arylic.com/httpapi/#device-information
    - Playback Control: https://developer.arylic.com/httpapi/#playback-control
    - Multiroom/Multizone: https://developer.arylic.com/httpapi/#multiroom-multizone
    - Extended M3U Tags: https://developer.arylic.com/httpapi/#extended-m3u-tags 
- Use the Python Linkplay API implementation for reference: https://github.com/Velleman/python-linkplay/tree/main/src/linkplay
- Implement robust error handling and retry mechanisms.



---

# **.cursorrules for OpenHAB LinkPlay Binding**

---

## **General Guidelines**
- Adhere to the OpenHAB coding guidelines: [OpenHAB Developer Guidelines](https://www.openhab.org/docs/developer/guidelines.html).
- Prioritize modularity, maintainability, and readability.
- Use Java for implementation, leveraging the OpenHAB API and libraries.
- Follow OpenHAB null-safety practices using `@NonNull` annotations.

---

## **Directory Structure and File Roles**
The codebase is modular and adheres to OpenHAB's structure for bindings.

### **Directory: `org.openhab.binding.linkplay.internal`**
#### **`config`**:
- **`LinkPlayConfiguration.java`**: Validates and encapsulates configuration data (e.g., IP address, polling intervals).

#### **`discovery`**:
- **`LinkPlayUpnpDiscoveryParticipant.java`**: Discovers LinkPlay devices using UPnP and validates compatibility.

#### **`handler`**:
- **`LinkPlayThingHandler.java`**: Manages the lifecycle of a LinkPlay device, delegating UPnP, HTTP, and multiroom tasks.

#### **`http`**:
- **`LinkPlayHttpClient.java`**: Handles low-level HTTP communication.
- **`LinkPlayHttpManager.java`**: Abstracts HTTP operations with retry and error-handling logic.
- **`LinkPlayApiException.java`** & **`LinkPlayCommunicationException.java`**: Specialized exceptions for API and network errors.
- **`LinkPlayPemConstants.java`** & **`LinkPlaySslUtil.java`**: Centralized SSL/TLS configurations for secure communication.

#### **`model`**:
- **`MultiroomInfo.java`**: Encapsulates multiroom state, including master/slave relationships.

#### **`upnp`**:
- **`LinkPlayUpnpManager.java`**: Manages UPnP subscriptions and events.
- **`DIDLParser.java`**: Parses metadata from UPnP `CurrentTrackMetaData` events.
- **`LinkPlayEventListener.java`**: Listens to and processes UPnP events.

#### **`utils`**:
- **`HexConverter.java`**: Converts hex-encoded strings to UTF-8.
- **`LinkPlayBindingConstants.java`**: Defines binding-specific constants.

#### **`resources`**:
- **`OH-INF/addon.xml`**: Metadata about the binding for OpenHAB.
- **`OH-INF/thing/linkplay-player.xml`**: Defines channels and configurations.
- **`OH-INF/i18n/linkplay.properties`**: Localized strings for UI and logs.

---

## **Design and Patterns**

### **Key Design Goals**
1. **Initialization**:
   - Register for UPnP events.
   - Start polling for device status.
2. **Event Handling**:
   - Process `AVTransport` and `RenderingControl` UPnP events.
   - Update channels based on HTTP responses as a fallback.
3. **Command Handling**:
   - Map commands to HTTP API calls (e.g., `setPlayerCmd:play`).
4. **Channel Management**:
   - Maintain playback, device, and multiroom channel states via polling and UPnP updates.
5. **Cleanup**:
   - Properly dispose of UPnP and HTTP resources.

---

## **UPnP Implementation**
- Follows modern patterns inspired by the Wemo binding for simplicity and robustness.
- **Services Supported**:
  - `AVTransport`: Handles playback-related events.
  - `RenderingControl`: Handles volume and mute controls.
  - `MediaRenderer`: General renderer events.
- **Subscription Management**:
  - Periodically renew subscriptions and handle expirations.
  - Clean up subscriptions on `dispose()` to avoid stale states.
- **Fallback Mechanism**:
  - Switch to HTTP polling if UPnP subscriptions fail.

---

## **HTTP Implementation**
- **Security**:
  - Custom SSL/TLS handling via `LinkPlaySslUtil` and PEM files.
- **Retry Logic**:
  - Exponential backoff with jitter for transient failures.
- **Encapsulation**:
  - `LinkPlayHttpClient`: Handles raw requests.
  - `LinkPlayHttpManager`: Manages retries and API abstractions.

---

## **Multiroom Implementation**
- Encapsulated in `LinkPlayGroupManager`.
- Supports master/slave management and group volume/mute operations.
- Uses polling for status updates (e.g., role and group membership).

---

## **Polling Strategy**
- Default interval: 10 seconds.
- Stops polling when UPnP subscriptions are active and stable.

---

## **Testing Requirements**
1. **Unit Tests**:
   - Validate UPnP and HTTP logic, including retry mechanisms.
2. **Integration Tests**:
   - Simulate multi-device setups and validate lifecycle management.
3. **Performance Tests**:
   - Test scalability with concurrent devices.

---

## **Research and Reference Documents**
- **LinkPlay API Documentation**: [LinkPlay API Docs](https://developer.arylic.com/httpapi/#http-api)
- **LinkPlay Python Implementation**: [GitHub Repository](https://github.com/Velleman/python-linkplay/tree/main/src/linkplay)
- **Wemo Binding**: Reference for modern UPnP implementation.
- **Sonos Binding**: Robust patterns for audio devices.
- **OpenHAB Developer Resources**:
  - [Binding Development](https://www.openhab.org/docs/developer/bindings/)
  - [Add-on Development](https://www.openhab.org/docs/developer/addons/)

