REFERNCE API https://github.com/mjcumming/async-somecomfort/tree/main/asyncsomecomfort

# HoneywellTCC OpenHAB Binding Development Guide

## Overview
This guide details the implementation of a binding for Honeywell Total Comfort Control (TCC) thermostats in OpenHAB. The implementation must follow the OpenHAB development guidelines and patterns while exactly matching the HTTP behavior of the reference Python implementation.

**IMPORTANT: Follow existing OpenHAB design patterns. Reference existing bindings in the OpenHAB codebase for implementation guidance. Consistency with OpenHAB conventions is critical.**

# HoneywellTCC OpenHAB Binding Development Guide

## Overview
This guide details the implementation of a binding for Honeywell Total Comfort Control (TCC) thermostats in OpenHAB. The implementation must follow the OpenHAB development guidelines and patterns while exactly matching the HTTP behavior of the reference Python implementation: https://github.com/kk7ds/somecomfort

**IMPORTANT: Follow existing OpenHAB design patterns. Reference existing bindings in the OpenHAB codebase for implementation guidance.**

## Project Structure
```
org.openhab.binding.honeywelltcc/
├── README.md                              // Binding documentation
├── pom.xml                                // Maven build file
├── src/main/java/org/openhab/binding/honeywelltcc/
│   └── internal/
└── src/main/resources/
    └── OH-INF/

```

## Design Pattern for HoneywellTCC Binding

### Component Responsibilities

1. **HoneywellTCCHandlerFactory**
   - Creates both bridge and thermostat handlers
   - Manages dependency injection
   - Ensures proper lifecycle management

2. **HoneywellTCCBridgeHandler**
   - Manages shared HoneywellTCCHttpClient
   - Handles authentication and session management
   - Performs centralized polling for all thermostats
   - Discovers and maintains device list
   - Distributes updates to child thermostat handlers
   - Implements rate limiting and error handling

3. **HoneywellTCCThermostatHandler**
   - Receives updates from bridge
   - Manages channel states
   - Processes commands via bridge's client
   - Stores location/device IDs as properties

### Data Flow
```
HoneywellTCCHandlerFactory
├── Creates HoneywellTCCBridgeHandler
│   ├── Manages single HoneywellTCCHttpClient instance
│   ├── Handles authentication
│   ├── Performs polling (getThermostatData)
│   └── Distributes updates to child thermostats
└── Creates HoneywellTCCThermostatHandler
    ├── Receives updates from bridge
    ├── Manages channels/state
    └── Sends commands via bridge's client
```

### Implementation Notes
- Bridge polls all thermostats in single API call for efficiency
- Thermostat handlers register with bridge for updates
- Location data stored as thermostat properties (no separate handler)
- Single HTTP client instance managed by bridge
- Rate limiting implemented at bridge level

**Follow OpenHAB Patterns:**
- Use standard OpenHAB foundation classes
- Implement proper disposal in dispose() methods
- Follow OpenHAB logging conventions
- Use standard OpenHAB configuration patterns
- Reference existing bindings for implementation patterns

**Critical Implementation Notes:**
1. Exactly match the Python implementation's HTTP behavior
2. Implement proper rate limiting
3. Handle all temperature values in Fahrenheit internally
4. Validate hold times for 15-minute boundaries
5. Handle partial device data gracefully
6. Ensure thread safety in all components
7. Implement proper resource cleanup
8. Follow OpenHAB null annotation patterns
9. Use appropriate OpenHAB type systems

## API Reference
Key endpoints:
- Authentication: `/portal/Account/LogOn`
- Location List: `/portal/Location/GetLocationListData`
- Device Data: `/portal/Device/CheckDataSession/{deviceId}`
- Settings Update: `/portal/Device/SubmitControlScreenChanges`

## References
- OpenHAB Developer Guide: https://www.openhab.org/docs/developer/
- OpenHAB Guidelines: https://www.openhab.org/docs/developer/guidelines.html
- Binding Development: https://www.openhab.org/docs/developer/bindings/
- Add-ons: https://www.openhab.org/docs/developer/addons/